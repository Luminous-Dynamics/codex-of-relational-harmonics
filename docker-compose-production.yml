version: '3.8'

services:
  # Sacred Heart Core Service
  sacred-heart:
    image: ${DOCKER_REGISTRY:-docker.io}/${DOCKER_USERNAME}/sacred-heart-quantum:${VERSION:-latest}
    container_name: sacred-heart-production
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - SACRED_MODE=quantum
      - LOVE_FREQUENCY=528
      # API Keys (stored in .env file)
      - GROQ_API_KEY=${GROQ_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # Database
      - DATABASE_URL=${DATABASE_URL:-sqlite:///data/sacred.db}
      # Stripe
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      # Community Key Service
      - ENABLE_COMMUNITY_KEY=${ENABLE_COMMUNITY_KEY:-true}
      - COMMUNITY_KEY_RATE_LIMIT=${COMMUNITY_KEY_RATE_LIMIT:-100}
    volumes:
      - sacred-data:/data
      - sacred-logs:/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/sacred/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sacred-network

  # Sacred Breath Gateway (PWA)
  sacred-breath:
    image: ${DOCKER_REGISTRY:-docker.io}/${DOCKER_USERNAME}/sacred-breath:${VERSION:-latest}
    container_name: sacred-breath-production
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      - API_ENDPOINT=http://sacred-heart:3001
      - ENABLE_SPONSORSHIP=${ENABLE_SPONSORSHIP:-true}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
    volumes:
      - ./websites:/usr/share/nginx/html:ro
    depends_on:
      - sacred-heart
    networks:
      - sacred-network

  # PostgreSQL for Production Data
  sacred-database:
    image: postgres:15-alpine
    container_name: sacred-database
    restart: unless-stopped
    environment:
      - POSTGRES_DB=sacred_heart
      - POSTGRES_USER=${DB_USER:-sacred}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - sacred-network

  # Redis for Session Management & Caching
  sacred-cache:
    image: redis:7-alpine
    container_name: sacred-cache
    restart: unless-stopped
    volumes:
      - redis-data:/data
    networks:
      - sacred-network

  # Nginx Reverse Proxy with SSL
  sacred-gateway:
    image: nginx:alpine
    container_name: sacred-gateway
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - certbot-data:/var/www/certbot:ro
    depends_on:
      - sacred-heart
      - sacred-breath
    networks:
      - sacred-network

  # Certbot for SSL Certificates
  certbot:
    image: certbot/certbot
    container_name: sacred-certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - certbot-data:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # Monitoring with Prometheus
  sacred-monitor:
    image: prom/prometheus:latest
    container_name: sacred-monitor
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - sacred-network

  # Grafana for Visualization
  sacred-insights:
    image: grafana/grafana:latest
    container_name: sacred-insights
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - sacred-monitor
    networks:
      - sacred-network

volumes:
  sacred-data:
  sacred-logs:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:
  certbot-data:

networks:
  sacred-network:
    driver: bridge